/* ------------------------------------------------------------------------------- *//*  XML Extensions *//* ------------------------------------------------------------------------------- */XMLElement.prototype.children = function() {    var children = [];    if (!this.hasOwnProperty('xmlElements')) return children;    for (var i = 0; i < this.xmlElements.length; i++) {        children.push(this.xmlElements[i]);    }    return children;};XMLElement.prototype.tag = function (type) {	if (type) this.markupTag = type;	return this.markupTag.name;};XMLElement.prototype.val = function (value) {	if (!this.isValid) {		return undefined;	} else if (value) {		this.contents = value;	}	return this.contents;};/* ------------------------------------------------------------------------------- *//*  Extendscript Doc *//* ------------------------------------------------------------------------------- */(function(global, that) {    if (global.hasOwnProperty(that)) throw new Error("Global variable already defined.");    global[that] = that;    // =================================    // Private    // =================================    function getPath(fileName) {        if (fileName === undefined) throw new Error("Invalid name");        var fileSep = File.fs === "Windows" ?  "\\" : "/";        if (that.rootDirectory.length === 0) {            try {                that.rootDirectory = app.activeDocument.filePath;            } catch(error) {                that.rootDirectory = new File($.fileName).parent;            }        }        var path = that.rootDirectory + fileSep + fileName;        $.writeln("path is: " + path);        return path;    }    function getFile(fileName, folderName) {        if (fileName === undefined) throw new Error("Invalid name");        var fileSep = File.fs === "Windows" ?  "\\" : "/";        return (folderName === undefined || folderName === "") ? new File(getPath(fileName)) : new File(getPath(getFolder(folderName).name + fileSep + fileName));    }    function getFolder(folderName) {        if (folderName === undefined) throw new Error("Invalid name");        var folder = new Folder(getPath(folderName));        if (!folder.exists) folder.create();        return folder;    }    function hasValidXML() {        var validationErrors = app.activeDocument.xmlElements.item(0).validate();        var validationError;        for(var i = 0, n = validationErrors.length; i < n; i++) {            validationError = validationErrors[i];            $.writeln(app.activeDocument.fullName + ": " + validationError.element.markupTag.name + " – " + validationError.errorMessage);        }        return validationErrors.length === 0;    }    // =================================    // Public    // =================================    that.rootDirectory = "";    that.open = function(fileName) {        return app.open(File(getPath(fileName), OpenOptions.OPEN_COPY));    };    that.close = function() {        app.activeDocument.close(SaveOptions.NO);    };    that.appendXML = function(fileName, folderName) {        if (fileName === undefined) throw new Error("Invalid file name");        var pref = app.activeDocument.xmlImportPreferences;        pref.createLinkToXML = true;        pref.repeatTextElements = true;        var file = File(getFile(fileName, folderName));        if(!file.exists) throw new Error("XML file does not exist");        app.activeDocument.importXML(file);        return hasValidXML() ? app.activeDocument.xmlElements : undefined;    };    that.appendDTD = function(fileName, folderName) {        if (fileName === undefined) throw new Error("Invalid file name");        var file = File(getFile(fileName, folderName));        if(!file.exists) throw new Error("DTD file does not exist");        return app.activeDocument.importDtd(file);    };    that.xmlRoot = function() {        return app.activeDocument.xmlElements.item(0);    };    that.xmlRootNode = function(key) {        var node = that.xmlRoot().xmlElements.item(key);        if (!node.isValid) throw new Error("Could not find xml node of " + key);        if (typeof(node.index) === "object") throw new Error("Multiple nodes selected");        return node;    };    that.copyXML = function(xmlElement, copyParentName) {        var parent = Doc.xmlRoot().xmlElements.add(copyParentName);        return xmlElement.duplicate().move(LocationOptions.AT_END, parent);    };    that.combineXMLtoTextframe = function(arr, tf) {        tf.contents = "";        for (var i = 0, n = arr.length, obj = {}; i < n; i++) {            obj = arr[i];            $.writeln(obj.name);            if (obj.xmlElement.contents.length) {                if (obj.hasOwnProperty('before')) obj.xmlElement.insertTextAsContent(obj.before, XMLElementPosition.ELEMENT_START);                if (obj.hasOwnProperty('after')) obj.xmlElement.insertTextAsContent(obj.after, XMLElementPosition.ELEMENT_END);                if (obj.hasOwnProperty('paragraphStyleName')) that.applyParagraphStyle(obj.xmlElement, obj.paragraphStyleName);                tf.markup(obj.xmlElement);            }        }    };    that.newPageWithMaster = function(masterPageName, useCurrent) {        if (!useCurrent) app.activeDocument.pages.add();        var newPage = app.activeDocument.pages[(app.activeDocument.pages.length - 1)];        newPage.appliedMaster = app.activeDocument.masterSpreads.itemByName(masterPageName);        return newPage;    };    that.exportToPDF= function(fileName, folderName) {        var file = getFile(fileName, folderName);        var pdfPreset = app.pdfExportPresets.itemByName("[PDF/X-4:2008]");        if (!pdfPreset.isValid) throw new Error("PDF preset doesn't exist. E.g. [PDF/X-4:2008]");        app.activeDocument.exportFile(ExportFormat.PDF_TYPE, file, false, pdfPreset);    };    that.saveACopy = function(fileName, folderName) {        app.activeDocument.saveACopy(getFile(fileName, folderName));    };    that.tf = function(key) {        var textField = app.activeDocument.textFrames.itemByName(key);        if (textField.contents === undefined) throw new Error("Could not find content of textfield " + key);        return textField;    };    that.applyParagraphStyle = function(xmlElement, paragraphStyleName) {        // todo cache references to paragraphStyleName        xmlElement.applyParagraphStyle(app.activeDocument.paragraphStyles.itemByName(paragraphStyleName));    };    that.findChangeText = function(arr) {        app.findChangeTextOptions = NothingEnum.nothing;        app.findChangeTextOptions.includeMasterPages = true;        for (var i = 0, n = arr.length; i < n; i++) {            app.findTextPreferences.findWhat = arr[i].from;            app.changeTextPreferences.changeTo = arr[i].to;            app.activeDocument.changeText();        }    };})($.global,{toString:function(){return 'Doc';}});/* ------------------------------------------------------------------------------- *//*  Extendscript Doc *//* ------------------------------------------------------------------------------- */(function(global, that) {    if (global.hasOwnProperty(that)) throw new Error("Global variable already defined.");    global[that] = that;    // =================================    // Private    // =================================    // =================================    // Public    // =================================    that.currencyFormatted = function(amount) {        var i = parseFloat(amount);        if (isNaN(i)) { i = 0.00; }        var minus = '';        if (i < 0) { minus = '-'; }        i = Math.abs(i);        i = parseInt((i + 0.005) * 100, 10);        i = i / 100;        s = String(i);        if (s.indexOf('.') < 0) { s += '.00'; }        if (s.indexOf('.') == (s.length - 2)) { s += '0'; }        s = minus + s;        return s;    };})($.global,{toString:function(){return 'Txt';}});